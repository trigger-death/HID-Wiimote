//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HIDWiimote.ControlCenter.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Installer {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Installer() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HIDWiimote.ControlCenter.Properties.Installer", typeof(Installer).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to optional.
        /// </summary>
        public static string ActionOptional {
            get {
                return ResourceManager.GetString("ActionOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to required.
        /// </summary>
        public static string ActionRequired {
            get {
                return ResourceManager.GetString("ActionRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable.
        /// </summary>
        public static string ButtonDisable {
            get {
                return ResourceManager.GetString("ButtonDisable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable.
        /// </summary>
        public static string ButtonEnable {
            get {
                return ResourceManager.GetString("ButtonEnable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install.
        /// </summary>
        public static string ButtonInstall {
            get {
                return ResourceManager.GetString("ButtonInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall.
        /// </summary>
        public static string ButtonUninstall {
            get {
                return ResourceManager.GetString("ButtonUninstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installs driver certificate..
        /// </summary>
        public static string Certificate_Description {
            get {
                return ResourceManager.GetString("Certificate_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to May boost driver ranking, if it is not selected as default..
        /// </summary>
        public static string Certificate_SmallDescription {
            get {
                return ResourceManager.GetString("Certificate_SmallDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate.
        /// </summary>
        public static string Certificate_Title {
            get {
                return ResourceManager.GetString("Certificate_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PnP Device Driver for the Wii Remote..
        /// </summary>
        public static string DeviceDriver_Description {
            get {
                return ResourceManager.GetString("DeviceDriver_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An entry in &quot;Programs and Features&quot; is added for uninstall..
        /// </summary>
        public static string DeviceDriver_SmallDescription {
            get {
                return ResourceManager.GetString("DeviceDriver_SmallDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Device Driver.
        /// </summary>
        public static string DeviceDriver_Title {
            get {
                return ResourceManager.GetString("DeviceDriver_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while trying to run the following action: .
        /// </summary>
        public static string InstallerAction_ExceptionDialogMessage {
            get {
                return ResourceManager.GetString("InstallerAction_ExceptionDialogMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occured!.
        /// </summary>
        public static string InstallerAction_ExceptionDialogTitle {
            get {
                return ResourceManager.GetString("InstallerAction_ExceptionDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] JulianLoehrCA {
            get {
                object obj = ResourceManager.GetObject("JulianLoehrCA", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] RobertJordanCA {
            get {
                object obj = ResourceManager.GetObject("RobertJordanCA", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables permanent Test mode..
        /// </summary>
        public static string TestMode_Description {
            get {
                return ResourceManager.GetString("TestMode_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: Requires reboot to take action..
        /// </summary>
        public static string TestMode_RedNote {
            get {
                return ResourceManager.GetString("TestMode_RedNote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test Mode or turned off Driver Signature Verification is required to run the Driver. If Test Mode is off, you need to manually turn off Driver Signature Verification on each start up..
        /// </summary>
        public static string TestMode_SmallDescription {
            get {
                return ResourceManager.GetString("TestMode_SmallDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test Mode.
        /// </summary>
        public static string TestMode_Title {
            get {
                return ResourceManager.GetString("TestMode_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cd &quot;{{InstallDir}}&quot;
        ///START /WAIT dpinst.exe /q /u &quot;{{InfFileName}}&quot;
        ///IF ERRORLEVEL 1 (
        ///	ECHO dpinst.exe failed: %ERRORLEVEL%
        ///) ELSE (
        ///	REG DELETE &quot;HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall\HID Wiimote&quot; /f
        ///	del dpinst.exe
        ///	del &quot;{{InfFileName}}&quot;
        ///	del &quot;%~f0&quot;
        ///).
        /// </summary>
        public static string UninstallerContent {
            get {
                return ResourceManager.GetString("UninstallerContent", resourceCulture);
            }
        }
    }
}
